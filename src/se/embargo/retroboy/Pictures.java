package se.embargo.retroboy;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

import se.embargo.retroboy.filter.AtkinsonFilter;
import se.embargo.retroboy.filter.BayerFilter;
import se.embargo.retroboy.filter.IImageFilter;

import android.content.ContentValues;
import android.content.Context;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.os.Environment;
import android.provider.MediaStore;
import android.util.Log;

public class Pictures {
	private static final String TAG = "Pictures";

	public static final String PREFS_NAMESPACE = "se.embargo.retroboy";
	
	public static final String PREF_FILTER = "filter";
	
	private static final String PREF_FILTER_BAYER = "bayer";
	private static final String PREF_FILTER_ATKINSON = "atkinson";
	private static final String PREF_FILTER_DEFAULT = PREF_FILTER_BAYER;

	private static final String PREF_IMAGECOUNT = "imagecount";
	
	private static final String DIRECTORY = "Retroboy";
	private static final String FILENAME = "IMGR%04d.png";

	public static final int IMAGE_WIDTH = 480, IMAGE_HEIGHT = 360;
	
	public static File compress(Context context, String inputpath, String outputpath, Bitmap bm) {
		SharedPreferences prefs = context.getSharedPreferences(PREFS_NAMESPACE, Context.MODE_PRIVATE);

		// Create path to output file
		File file;
		if (outputpath != null) {
			// Overwrite the previously processed file
			file = new File(outputpath);
		}
		else {
			String filename;
			boolean autogenerated = false;
			
			do {
				if (inputpath != null) {
					// Use the original image name
					filename = new File(inputpath).getName();
					filename = filename.split("\\.", 2)[0];
					filename += ".png";
				}
				else {
					// Create a new sequential name
					autogenerated = true;
					
					int count = prefs.getInt(PREF_IMAGECOUNT, 0);
					filename = String.format(FILENAME, count);
					
					// Increment the image count
					SharedPreferences.Editor editor = prefs.edit();
					editor.putInt(PREF_IMAGECOUNT, count + 1);
					editor.commit();
				}
				
				File path = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);
				file = new File(path + "/" + DIRECTORY, filename);
			} while (autogenerated && file.exists());
		}
		
		// Create parent directory as needed
		new File(file.getParent()).mkdirs();
		
		try {
			// Delete old instance of image
			context.getContentResolver().delete(
				MediaStore.Images.Media.EXTERNAL_CONTENT_URI, 
				MediaStore.Images.Media.DATA + "=?", new String[] {file.getAbsolutePath()});
			
			// Write the file to disk
			FileOutputStream os = new FileOutputStream(file);
			boolean written = bm.compress(Bitmap.CompressFormat.PNG, 100, os);
			if (!written) {
				Log.w(TAG, "Failed to write output image to " + file.toString());
			}
			os.close();
			
			// Tell the gallery about the image
			if (written) {
				ContentValues values = new ContentValues();
				values.put(MediaStore.Images.Media.DATA, file.getAbsolutePath());
				values.put(MediaStore.Images.Media.MIME_TYPE, "image/png");
				context.getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);
			}
		}
		catch (IOException e) {}
		
		return file;
	}
	
	public static IImageFilter createEffectFilter(Context context) {
		SharedPreferences prefs = context.getSharedPreferences(PREFS_NAMESPACE, Context.MODE_PRIVATE);
		String filtertype = prefs.getString(PREF_FILTER, PREF_FILTER_DEFAULT);
		if (PREF_FILTER_ATKINSON.equals(filtertype)) {
			return new AtkinsonFilter(IMAGE_WIDTH, IMAGE_HEIGHT);
		}

		return new BayerFilter(IMAGE_WIDTH, IMAGE_HEIGHT);
	}
	
	public static int getFilterDrawableResource(Context context) {
		SharedPreferences prefs = context.getSharedPreferences(PREFS_NAMESPACE, Context.MODE_PRIVATE);
		String filtertype = prefs.getString(Pictures.PREF_FILTER, PREF_FILTER_DEFAULT);
		if (PREF_FILTER_ATKINSON.equals(filtertype)) {
			return R.drawable.ic_menu_atkinson;
		}
		
		return R.drawable.ic_menu_bayer;
	}
	
	public static void toggleImageFilter(Context context) {
		SharedPreferences prefs = context.getSharedPreferences(PREFS_NAMESPACE, Context.MODE_PRIVATE);

		// Switch the active image filter
		String filtertype = prefs.getString(PREF_FILTER, PREF_FILTER_DEFAULT);
		SharedPreferences.Editor editor = prefs.edit();
		
		if (PREF_FILTER_ATKINSON.equals(filtertype)) {
			editor.putString(PREF_FILTER, PREF_FILTER_BAYER);
		}
		else {
			editor.putString(PREF_FILTER, PREF_FILTER_ATKINSON);
		}
		
		editor.commit();
	}
}
